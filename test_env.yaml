AWSTemplateFormatVersion: 2010-09-09
Description: Create VPC for flower platform
Parameters:
  AZ:
    Description: AZ to use
    Type: List<String>
    Default: "ap-northeast-2a, ap-northeast-2c"

  BucketUrl:
    Description: it is a bucket template Url.
    Type: String
    Default: "https://cloudformation-code-repo-flower-platform.s3.ap-northeast-2.amazonaws.com/"
  
  OnCreateStackBucketName:
    Description: Bucket name where lambda code and other resources need by the lambda is located 
    Type: String
    Default: cloudformation-code-repo-flower-platform

  BastionKeyPairName:
    Description: key pair name for bastion server
    Type: String
    Default: bastion-server-key-pair
  
  WebServerKeyPairName:
    Description: key pair name for web servers
    Type: String
    Default: spring-web-server

  WebServerAmi:
    Description: WebServer ami
    Type: String
    Default: ami-0ddb4a2e8154b2bd4
  
  DBMasterUserName:
    Description: MasterUserName for DB
    Type: String
    Default: admin
  
  DBMasterPassword:
    Description: MasterPassword for DB
    Type: String
    Default: helloWorld!

  CodePipelineBucket:
    Description: CodePipeline bucket for cicd
    Type: String
    Default: codepipeline-ap-northeast-2-90936547683
  
  LambdaLayerKey:
    Description: key for lambda layer zip file
    Type: String
    Default: "non-cfn/lambda_layer/python.zip"
  



Resources: 
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      Tags:
      - Key: Stage
        Value: test
      - Key: Description
        Value: it is a VPC for test stage
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      - Key: Description
        Value: it is a route table for test stage
    DependsOn: VPC

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  NATGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !GetAtt PublicSubnetFirst.Outputs.SubnetId
      Tags:
      - Key: stack
        Value: production

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: vpc

  PublicSubnetFirst:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/public_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        IgId: !GetAtt InternetGateway.InternetGatewayId
        AZ: !Select [ 0, !Ref AZ]
        CidrBlock: 10.0.0.0/24

  PublicSubnetSecond:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/public_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        IgId: !GetAtt InternetGateway.InternetGatewayId
        AZ: !Select [ 1, !Ref AZ]
        CidrBlock: 10.0.1.0/24

  WebServerSubnetFirst:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/private_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        AZ: !Select [ 0, !Ref AZ]
        CidrBlock: 10.0.2.0/24
        NatGatewayId: !Ref NATGateway
  
  WebServerSubnetSecond:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/private_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        AZ: !Select [ 1, !Ref AZ]
        CidrBlock: 10.0.3.0/24
        NatGatewayId: !Ref NATGateway
  
  DatabaseSubnetFirst:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/private_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        AZ: !Select [ 0, !Ref AZ]
        CidrBlock: 10.0.4.0/24
        NatGatewayId: !Ref NATGateway

  DatabaseSubnetSecond:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/private_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        AZ: !Select [ 1, !Ref AZ]
        CidrBlock: 10.0.5.0/24
        NatGatewayId: !Ref NATGateway

  #---------------------------------- compute resource-----------------------------

  #create bastion server
  BastionServer:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'compute/bastion_server.yaml']]
      Parameters:
        SubnetId: !GetAtt PublicSubnetFirst.Outputs.SubnetId
        VpcId: !Ref VPC
        KeypairName: !Ref BastionKeyPairName
  
  WebServers:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'compute/web_servers.yaml']]
      Parameters:
        LoadBalancerSubnets: !Join [',', [!GetAtt PublicSubnetFirst.Outputs.SubnetId, !GetAtt PublicSubnetSecond.Outputs.SubnetId]]
        VPC: !Ref VPC
        WebServerSubnets: !Join [',', [!GetAtt WebServerSubnetFirst.Outputs.SubnetId, !GetAtt WebServerSubnetSecond.Outputs.SubnetId]]
        SSHKeyName: !Ref WebServerKeyPairName
        BastionServerSecurityGroup: !GetAtt BastionServer.Outputs.SecurityGroupId
        AmiId: !Ref WebServerAmi
        HealthCheckPath: /actuator/health
        CicdSourceBucketName: !Ref CodePipelineBucket
        MetricNameSpace: WebServersTestEnv
        MetricName: mem_used_percent
        MetricTarget: '70'

  #------------------------------ database ----------------------------------------------
  Database:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'database/RDS.yaml']]
      Parameters:
        DBSubnets: !Join [',', [!GetAtt DatabaseSubnetFirst.Outputs.SubnetId, !GetAtt DatabaseSubnetSecond.Outputs.SubnetId]]
        VpcId: !Ref VPC
        BastionSecGroup: !GetAtt BastionServer.Outputs.SecurityGroupId
        ClientSecGroup: !GetAtt WebServers.Outputs.WebServerSecGroupId
        DBMasterUserName: !Ref DBMasterUserName
        DBMasterPassword: !Ref DBMasterPassword

  #--------------------------- endpoint ---------------------------------------------
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      RouteTableIds:                     #어떤 route table이 이 resource에 route할수 있는지 지정
        - !GetAtt WebServerSubnetFirst.Outputs.RouteTableId
        - !GetAtt WebServerSubnetSecond.Outputs.RouteTableId
        - !GetAtt PublicSubnetFirst.Outputs.RouteTableId
        - !GetAtt PublicSubnetSecond.Outputs.RouteTableId
      ServiceName: "com.amazonaws.ap-northeast-2.s3" 
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
  
  
  EndPointSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security group endpoint interface. allow all traffic
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      VpcId: !Ref VPC

  #------------------------- custom resources -----------------------------------
  LambdaLayer:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'lambda/layer.yaml']]  #specify lambda template
      Parameters:
        LayerBucketName: !Ref OnCreateStackBucketName
        LayerS3Key: !Ref LambdaLayerKey
        
  InitDBLambda:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'lambda/on_create_stack.yaml']]
      Parameters:
        CodeBucketName: !Ref OnCreateStackBucketName
        CodeKey: 'non-cfn/on_create_stack/init_db.py.zip'
        LambdaLayerArns: !Join [ ',', [!GetAtt LambdaLayer.Outputs.LambdaLayerArn ]]
        SecGroupId: !GetAtt WebServers.Outputs.WebServerSecGroupId
        SubnetIds: !Join [',', [!GetAtt WebServerSubnetFirst.Outputs.SubnetId, !GetAtt WebServerSubnetSecond.Outputs.SubnetId]]
        LambdaHandler: init_db.lambda_handler

  InitDBCR:
    Type: "Custom::OnCreateStack"
    Properties:
      ServiceToken: !GetAtt InitDBLambda.Outputs.LambdaArn
      DB_ENDPOINT: !GetAtt Database.Outputs.DBEndpoint
      BUCKET_NAME: !Ref OnCreateStackBucketName
      DDL_KEY: 'non-cfn/database/ddl.sql'
      DML_KEY: 'non-cfn/database/dml.sql'
      USER: !Ref DBMasterUserName
      PASSWORD: !Ref DBMasterPassword
    DependsOn: CfnBucketReadPolicy
  
  #----------------------------------- iam ----------------------------------------------------------

  CfnBucketReadPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect : "Allow"
          Action: 
            - s3:GetObject
          Resource: 
          - !Sub
            - "arn:aws:s3:::${ResourceBucketName}/*"
            - ResourceBucketName: !Ref OnCreateStackBucketName
      PolicyName: test-env-final-read-resource-bucket
      Roles: 
        - !GetAtt InitDBLambda.Outputs.LambdaRoleName
  
  CodeDeployVPCPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect : "Allow"
          Action: 
            - codedeploy-commands-secure:GetDeploymentSpecification
            - codedeploy-commands-secure:PollHostCommand
            - codedeploy-commands-secure:PutHostCommandAcknowledgement
            - codedeploy-commands-secure:PutHostCommandComplete
          Resource: 
            - '*'
      PolicyName: test-env-final-codedeploy-policy
      Roles: 
        - !GetAtt WebServers.Outputs.WebServerRoleName
  
  GetTestEnvSSMParameterPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: test-env-final-GetTestEnvSSMParameter-policy
      Roles:
        - !GetAtt WebServers.Outputs.WebServerRoleName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameters
              - ssm:GetParameter
            Resource: 
              - !Sub 
                - "arn:aws:ssm:${Region}:${AccountId}:parameter/test/*"
                - Region: !Ref AWS::Region
                  AccountId: !Ref AWS::AccountId 

  CloudwatchConfigParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /test/web-server/config/cloudwatch-config.json
      Type: String
      Value: |
        {
          "agent": {
            "metrics_collection_interval": 60,
            "run_as_user": "root"
          },
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/home/ec2-user/server.log",
                    "log_group_name": "server.log",
                    "log_stream_name": "{instance_id}",
                    "retention_in_days": -1
                  }
                ]
              }
            }
          },
          "metrics": {
            "namespace": "WebServersTestEnv",
            "aggregation_dimensions": [
              [
                "InstanceId"
              ]
            ],
            "append_dimensions": {
              "AutoScalingGroupName": "${aws:AutoScalingGroupName}",
              "ImageId": "${aws:ImageId}",
              "InstanceId": "${aws:InstanceId}",
              "InstanceType": "${aws:InstanceType}"
            },
            "metrics_collected": {
              "collectd": {
                "metrics_aggregation_interval": 60
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              },
              "statsd": {
                "metrics_aggregation_interval": 60,
                "metrics_collection_interval": 10,
                "service_address": ":8125"
              }
            }
          }
        }
      Description: config file for cloudwatch agent
      Tags:
        Environment: TEST
  
Outputs:
  RdsDbEndpoint:
    Description: DB endpoint for RDS
    Value: !GetAtt Database.Outputs.DBEndpoint
    Export:
      Name: TestEnvFinalDbEndpoint
