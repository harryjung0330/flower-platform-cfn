AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function with cfn-response.
Parameters:
  CodeBucketName:
    Type: String
    Description: S3 bucket for code
  CodeKey:
    Type: String
    Description: object key for the code
  
  SecGroupId:
    Type: String
    Description: Security group for lambda
  SubnetIds:
    Type: List<String>
    Description: subnet ids for lambda 
  LambdaHandler:
    Type: String
    Description: Handler for lambda
  

  #optional parameters
  Timeout:
    Type: Number
    Description: timeout in seconds 
    Default: 30
  Runtime:
    Type: String
    Description: Runtime for lambda
    Default: python3.7
  LambdaLayerArns:
    Type: List<String>
    Description: layers for lambda if they are created already
    Default: ""

Conditions:
  isLambdaLayerArnsEmpty: !Equals [!Ref LambdaLayerArns, ""]

Resources:
  
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt LambdaRole.Arn
      Handler: !Ref LambdaHandler   
      Timeout: !Ref Timeout
      Layers: If [IsLambdaLayerArnsEmpty, !Ref AWS::NoValue, !Ref LambdaLayerArns]
      VpcConfig:
        SecurityGroupIds: 
         - !Ref SecGroupId
        SubnetIds: !Ref SubnetIds
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeKey
      Description: Invoke a function during stack creation.

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-on-create-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow           #allow lambda to assume this role
          Principal:
           Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref LambdaNetworkPolicy
        - !Ref CloudwatchExPolicy
 
  
  CloudwatchExPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-cloudwatch-log-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow #allow to write logs to cloudwatch
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*

  LambdaNetworkPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-lambda-network-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:AssignPrivateIpAddresses
              - ec2:UnassignPrivateIpAddresses
            Resource: '*'    
Outputs:
  LambdaArn:
    Description: arn for lambda
    Value: !GetAtt Function.Arn
  
  LambdaRoleName:
    Description: role name for lambda
    Value: !Ref LambdaRole
