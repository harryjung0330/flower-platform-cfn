AWSTemplateFormatVersion: 2010-09-09
Description: Create VPC for flower platform
Parameters:
  AZ:
    Description: AZ to use
    Type: List<String>
    Default: "ap-northeast-2a, ap-northeast-2c"

  BucketUrl:
    Description: it is a bucket template Url.
    Type: String
    Default: "https://cloudformation-code-repo-flower-platform.s3.ap-northeast-2.amazonaws.com/"
  
  OnCreateStackBucketName:
    Description: Bucket name where lambda code and other resources need by the lambda is located 
    Type: String
    Default: cloudformation-code-repo-flower-platform

  BastionKeyPairName:
    Description: key pair name for bastion server
    Type: String
    Default: bastion-server-key-pair
  
  WebServerKeyPairName:
    Description: key pair name for web servers
    Type: String
    Default: spring-web-server

  WebServerAmi:
    Description: WebServer ami
    Type: String
    Default: ami-01667ac50214d9322
  
  DBMasterUserName:
    Description: MasterUserName for DB
    Type: String
    Default: admin
  
  DBMasterPassword:
    Description: MasterPassword for DB
    Type: String
    Default: helloWorld!

Resources: 
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      Tags:
      - Key: Stage
        Value: test
      - Key: Description
        Value: it is a VPC for test stage
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      - Key: Description
        Value: it is a route table for test stage
    DependsOn: VPC

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetFirst:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/public_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        IgId: !GetAtt InternetGateway.InternetGatewayId
        AZ: !Select [ 0, !Ref AZ]
        CidrBlock: 10.0.0.0/24

  PublicSubnetSecond:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/public_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        IgId: !GetAtt InternetGateway.InternetGatewayId
        AZ: !Select [ 1, !Ref AZ]
        CidrBlock: 10.0.1.0/24

  WebServerSubnetFirst:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/private_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        AZ: !Select [ 0, !Ref AZ]
        CidrBlock: 10.0.2.0/24
  
  WebServerSubnetSecond:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/private_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        AZ: !Select [ 1, !Ref AZ]
        CidrBlock: 10.0.3.0/24
  
  DatabaseSubnetFirst:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/private_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        AZ: !Select [ 0, !Ref AZ]
        CidrBlock: 10.0.4.0/24

  DatabaseSubnetSecond:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'network/private_subnet.yaml']]
      Parameters:
        VpcId: !Ref VPC
        AZ: !Select [ 1, !Ref AZ]
        CidrBlock: 10.0.5.0/24

  #---------------------------------- compute resource-----------------------------

  #create bastion server
  BastionServer:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'compute/bastion_server.yaml']]
      Parameters:
        SubnetId: !GetAtt PublicSubnetFirst.Outputs.SubnetId
        VpcId: !Ref VPC
        KeypairName: !Ref BastionKeyPairName
  
  WebServers:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'compute/web_servers.yaml']]
      Parameters:
        LoadBalancerSubnets: !Join [',', [!GetAtt PublicSubnetFirst.Outputs.SubnetId, !GetAtt PublicSubnetSecond.Outputs.SubnetId]]
        VPC: !Ref VPC
        WebServerSubnets: !Join [',', [!GetAtt WebServerSubnetFirst.Outputs.SubnetId, !GetAtt WebServerSubnetSecond.Outputs.SubnetId]]
        SSHKeyName: !Ref WebServerKeyPairName
        BastionServerSecurityGroup: !GetAtt BastionServer.Outputs.SecurityGroupId
        AmiId: !Ref WebServerAmi
        HealthCheckPath: /actuator/health
  

  #------------------------------ database ----------------------------------------------
  Database:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'database/RDS.yaml']]
      Parameters:
        DBSubnets: !Join [',', [!GetAtt DatabaseSubnetFirst.Outputs.SubnetId, !GetAtt DatabaseSubnetSecond.Outputs.SubnetId]]
        VpcId: !Ref VPC
        BastionSecGroup: !GetAtt BastionServer.Outputs.SecurityGroupId
        ClientSecGroup: !GetAtt WebServers.Outputs.WebServerSecGroupId
        DBMasterUserName: !Ref DBMasterUserName
        DBMasterPassword: !Ref DBMasterPassword

  #--------------------------- endpoint ---------------------------------------------
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      RouteTableIds:                     #어떤 route table이 이 resource에 route할수 있는지 지정
        - !GetAtt WebServerSubnetFirst.Outputs.RouteTableId
        - !GetAtt WebServerSubnetSecond.Outputs.RouteTableId
        - !GetAtt PublicSubnetFirst.Outputs.RouteTableId
        - !GetAtt PublicSubnetSecond.Outputs.RouteTableId
      ServiceName: "com.amazonaws.ap-northeast-2.s3" 
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
      
  #------------------------- custom resources -----------------------------------
  OnCreateLambda:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Tags:
      - Key: Stage
        Value: test
      TemplateURL: !Join ['', [!Ref BucketUrl, 'lambda/on_create_stack.yaml']]
      Parameters:
        CodeBucketName: !Ref OnCreateStackBucketName
        ResourceBucketName: !Ref OnCreateStackBucketName
        CodeKey: 'non-cfn/on_create_stack/on_create_stack.py.zip'
        LayerKey: 'non-cfn/on_create_stack/python.zip'
        SecGroupId: !GetAtt WebServers.Outputs.WebServerSecGroupId
        SubnetIds: !Join [',', [!GetAtt WebServerSubnetFirst.Outputs.SubnetId, !GetAtt WebServerSubnetSecond.Outputs.SubnetId]]

  OnCreateStack:
    Type: "Custom::OnCreateStack"
    Properties:
      ServiceToken: !GetAtt OnCreateLambda.Outputs.LambdaArn
      DB_ENDPOINT: !GetAtt Database.Outputs.DBEndpoint
      BUCKET_NAME: !Ref OnCreateStackBucketName
      DDL_KEY: 'non-cfn/database/ddl.sql'
      DML_KEY: 'non-cfn/database/dml.sql'
      USER: !Ref DBMasterUserName
      PASSWORD: !Ref DBMasterPassword